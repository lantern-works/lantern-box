#!/usr/bin/env node
var path = require("path");
var fs = require("fs");
var spawnSync = require('child_process').spawnSync;
var PouchDB = require('pouchdb-core')
    .plugin(require('pouchdb-adapter-node-websql'))
    .plugin(require('pouchdb-adapter-http'))
    .plugin(require('pouchdb-replication'))

//------------------------------------------------------------------------
var done = (function wait() { 
    if (!done) {
        setTimeout(wait, 1000)
    }
    else {
        log.info("closing service...\n");
        log.info("##############################################\n");
        setTimeout(process.exit, 100);
    }
})();

var logger_opts = {
    logFilePath:'/opt/lantern/logs/broadcast.log',
    dateFormat:'YYYY.MM.DD'
};

var log = require('simple-node-logger').createSimpleFileLogger( logger_opts );

var db;


var updated_at_limit;

//------------------------------------------------------------------------


/**
* push change over distributed long-range network
**/
function addMessageToQueue(msg) {
    if (!msg) return;
    //log.info("sending message to queue: " + msg);
    var result = spawnSync(path.resolve(__dirname + "/../bin/queue-message"), [msg]);
    log.info(String(result.stdout));
}

/**
* let other lanterns know about a key/value change
**/
function notifyDocumentUpdate(doc) {
    var msg = buildParameters(doc);
    if (msg.length) {
        msg = doc._rev.split("-")[0] + "^" + doc._id + "?" + msg;
        addMessageToQueue(msg);
    }
}


/**
* let other lanterns know about a new document
**/
var notifyDocumentCreate = notifyDocumentUpdate;


/**
* let other lanterns know about a removed document
**/
function notifyDocumentRemove(doc_id) {
    addMessageToQueue(doc._rev.split("-")[0] + "^" + doc_id);
}

/**
* check for updates since last broadcast revision
*/
function checkForChanges(since) {
    since = (since ? Number(since) : "now");
    log.info("find database changes since: " + since);

    db.changes({
            live: true,
            since: since,
            include_docs: true
        })
        .on("change", onChange)
        .on("complete", function() {
            log.info("[sync] complete");
            done = true;
        })
        .on('error', function (err) {
            log.error("err: ", err);
            done = true;
        });
}


/**
* construct a query-string style list of key/value pairs
*/
function buildParameters(doc) {
    var params = [];
    for (var k in doc) {
        // ignore private keys and reserved _ namespace items when sending
        if (k[0] != "_" && k[0] != "$") {
            var val = doc[k];

            if (typeof val === 'number') {
                params.push(k+"=#"+val);
            }
            else if (val instanceof Array) {
                if (val[0] == '[object Object]' || typeof(val[0]) == "object") {
                    // don't try to relay objects
                }
                else {
                    params.push(k+"=,"+val.join(","));
                }
            }
            else if (typeof val === 'string') {
                params.push(k+"="+val);
            }
            else if (typeof(val) == "object") {
                // don't try to relay objects
            }
        }
    }
    return params.join("&");
}

function processDoc(doc) {


    if (doc.hasOwnProperty("$rx")) {
        log.info("skip document already received by radio: " + doc._id);
        return;
    }

    if (doc.hasOwnProperty("$ua")) {
        try {
            if (updated_at_limit) {
                var updated_at = new Date(doc.$ua).getTime();
                var cut_off = updated_at_limit.getTime();
                if (updated_at < cut_off) {
                    log.info("refuse to send old document...", doc._id);
                    return;
                }
            }
            updated_at_limit = new Date(doc.$ua);
        }
        catch(e) {
            log.error(e);
            log.error("invalid updated_at field detected, ignoring...")
            return;
        }
    }

    if (doc._deleted) {
        // @todo notify once we can isolate most meaningful deletes
        log.info("cowardly refusing to send delete over network, for now...");
        return;
        //notifyDocumentRemove(doc._id);
    }
    
    log.info("====== " + doc._id + " ======");
    //log.info(doc);

    // push change over distributed long-range network
    if(doc._rev[0] == "1" && doc._rev[1] == "-") {
        // assume document has been created if we're at first revision
        notifyDocumentCreate(doc);
    }
    else {
        notifyDocumentUpdate(doc);
    }
}

/**
* handler to process any document change in local lantern database
**/
function onChange(change) {
    // log.info("change", change);
    for (var idx in change.changes) {
        processDoc(change.doc);
    }
}

//------------------------------------------------------------------------
/**
* start listening for changes
**/

db = new PouchDB("http://localhost/db/lnt/");;
checkForChanges();
