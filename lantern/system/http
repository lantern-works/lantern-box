#!/bin/bash

#
# This script supports the following environment vars:
#  - WEB_MEMORY: the amount of memory each
#    process is expected to consume, in MB.
#  - NODEJS_V8_ARGS: any additional args to
#    pass to the v8 runtime.

echo "============================"
echo "  Lantern HTTP Service"
echo "============================"

# Safe Limit for Raspberry Pi Zero
WEB_MEMORY=350

dir="/lantern/server"
node_args="${dir}/web/index.js --color"

export SSL_CERTIFICATE="${dir}/web/certs/cert.pem"
export SSL_PRIVATE_KEY="${dir}/web/certs/privkey.pem"
export SSL_CA="${dir}/web/certs/SectigoRSADomainValidationSecureServerCA.crt,${dir}/web/certs/AddTrustExternalCARoot.crt,${dir}/web/certs/USERTrustRSAAddTrustCA.crt"
export LORA_TEST="true"
export HOOK_CHANGE="/lantern/hooks/change"
export HOOK_COMMAND="/lantern/hooks/command"

if [[ -n "$WEB_MEMORY" ]]; then
  # The WEB_MEMORY environment variable is set.
  # Set the `mem_old_space_size` flag
  # to 4/5 of the available memory.
  # 4/5 has been determined via trial and error
  # to be the optimum value, to try and ensure
  # that v8 uses all of the available memory.
  # It's not an exact science however, and so
  # you may need to play around with this ratio.
  mem_node_old_space=$((($WEB_MEMORY*4)/5))
  node_args="--max_old_space_size=$mem_node_old_space $node_args"
fi

if [[ -n "$NODEJS_V8_ARGS" ]]; then
  # Pass any additional arguments to v8.
  node_args="$NODEJS_V8_ARGS $node_args"
fi


cd $dir

echo "Starting app:"
echo "> node $node_args"


# Start the process using `exec`.
# This ensures that when node exits,
# the exit code is passed up to the
# caller of this script.
exec node $node_args

trap : TERM INT; sleep infinity & wait


# credit to: https://www.fiznool.com/blog/2016/10/01/running-a-node-dot-js-app-in-a-low-memory-environment/
